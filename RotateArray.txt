// class Solution {
//     public void rotate(int[] nums, int k) {
//         int n=nums.length;

//             while(k>0){
//             int temp=nums[n-1];
//             for(int j=n-2; j>=0; j--){
//                 nums[j+1]=nums[j];
//             }
//             nums[0]=temp;
//             k--;
//         }        
//     }
// }

//Optimised solution

// class Solution {
//     public void rotate(int[] nums, int k) {
//         int n=nums.length;
//             if(k==0)
//             return;

//             if(k > n || k==n)
//             k = k % n;

//         int i=0;
//          int j=n-1;

//         while(i<j){
//             int temp=nums[i];
//             nums[i]=nums[j];
//             nums[j]=temp;
//             i++;
//             j--;
//         } 
//             i=0; 
//             j=k-1;
//         while(i<j){
//            int temp=nums[i];
//             nums[i]=nums[j];
//             nums[j]=temp;
//             i++;
//             j--;
//         }
   
//         i=k;
//         j=n-1;  
//          while(i<j){
//              int temp=nums[i];
//             nums[i]=nums[j];
//             nums[j]=temp;
//             i++;
//             j--;
//         } 
//     }
// }

//same approach with recursion

class Solution {
    public void rotate(int[] nums, int k) {

        int n=nums.length;
            if(k == 0)
             return;

            if(k > n || k == n)
                k = k % n;

            reverse(nums , 0 , n-1); // reverse entire array once
            reverse(nums , 0 , k-1); // then reverse k elements
            reverse(nums , k , n-1); // then reverse n-k elements
        
    }
    
    public void reverse(int nums[], int i, int j){
        
        while(i < j){ 

        int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        } 
    }
}