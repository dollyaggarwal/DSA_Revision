// public class Solution {
//     public static void insertionSort(int[] arr, int size) {
//         //Your code goes here

//         for(int i=0; i< size; i++){

//             int j=i;
//             while(j>0 && arr[j-1]>arr[j]){
//                 int temp=arr[j];
//                 arr[j]=arr[j-1];
//                 arr[j-1]=temp;
//                 j--;
//             }
//         }
//     }
// }

// //Alternative way
// public class Solution {
//     public static void insertionSort(int[] arr, int size) {
//         //Your code goes here

//         for(int i=0; i< size; i++){

//             int j=i-1;
//             int temp=arr[i];
//             while(j>=0 && arr[j]>temp){

//                 arr[j+1]=arr[j];

//                 j--;
//             }
//             arr[j+1]=temp;
//         }
//     }
// }

//recursive approach
public class Solution {
    public static void insertionSort(int[] arr, int size) {
        // Your code goes here

        helper(arr, size, 0);
    }

    public static void helper(int[] arr, int n, int si) {

        if (si >= n)
            return;

        int j = si - 1;
        int temp = arr[si];
        while (j >= 0 && arr[j] > temp) {

            arr[j + 1] = arr[j];

            j--;
        }
        arr[j + 1] = temp;
        helper(arr, n, si + 1);
    }

}