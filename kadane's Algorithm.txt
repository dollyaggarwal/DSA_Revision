//TC-->O(n^3)

// import java.util.*;
// import java.io.*;
// public class Solution {
//  	 public int maxSubArray(int[] nums) {

//         int n=nums.length;
//         int maxi =  Integer.MIN_VALUE;

//         for (int i = 0; i < n; i++) {
//             for (int j = i; j < n; j++) {
//                 // subarray = arr[i.....j]
//                 int sum = 0;

//                 for (int k = i; k <= j; k++) {
//                     sum += nums[k];
//                 }

//                 maxi = Math.max(maxi, sum);
//             }
//         }

//         return maxi;
//     }

// }

//TC-->O(n^2)

// import java.util.*;
// import java.io.*;

// public class Solution {

// 	 public int maxSubArray(int[] nums) {
// 		// write your code here
//        int n=nums.length;
// 		  int maxsum =  Integer.MIN_VALUE;

// 		for (int i = 0; i < n; i++) {
// 				int sum = 0;
// 			for (int j = i; j < n; j++) {
			
// 					sum = sum + nums[j];
// 					maxsum = Math.max(sum, maxsum);
// 				}
// 			}
// 		return maxsum;
// 	}
// }

//Optimised Approach--> O(n)-Kadane's algorithm

public class Solution {

	 public int maxSubArray(int[] nums) {
		// write your code here
       int n=nums.length;
		  int maxsum =  nums[0];
          int sum = 0;
		for (int i = 0; i < n; i++) {
            sum+=nums[i];
            maxsum=Math.max(maxsum, sum);
            if(sum < 0)
            sum=0; 
        }
        return maxsum;
     }
}
				


